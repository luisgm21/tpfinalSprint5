        <div class="container mt-4">
        <div class="page-header">
            <div>
                <h1 class="page-title">Lista de Países</h1>
                <div class="page-subtitle">Resumen de países cargados en la base de datos</div>
            </div>
            <div>
                <a id="addCountryBtn" href="/countries/new" class="btn btn-success">
                    <i class="fa fa-plus"></i>
                    Agregar país
                </a>
            </div>
        </div>
        
        <table id="countriesTable" class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Capital</th>
                    <th>Población</th>
                    <th>Gini</th>
                    <th>Área</th>
                    <th>Código</th>
                    <th>Fronteras</th>
                    <th>Timezones</th>
                    <th>Creador</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                <% if (countries && countries.length > 0) { %>
                    <% countries.forEach(country => { %>
                        <tr>
                            <td><%= country.name %></td>
                            <td><%= Array.isArray(country.capital) ? country.capital.join(', ') : (country.capital || '-') %></td>
                            <td><%= country.population?.toLocaleString() || 'N/A' %></td>
                            <td>
                                <% 
                                    let latestGini = null;
                                    let historyText = '';
                                    try {
                                        if (country.gini && Object.keys(country.gini).length) {
                                            const years = Object.keys(country.gini).sort();
                                            const y = years[years.length - 1];
                                            latestGini = Number(country.gini[y]);
                                            // construir historial legible
                                            historyText = years.map(yr => `${yr}: ${country.gini[yr]}`).join('\n');
                                        }
                                    } catch(e) { latestGini = null; historyText = ''; }
                                    const formattedGini = latestGini !== null && !Number.isNaN(latestGini) ? latestGini.toFixed(1) : '-';
                                %>
                                <span title="<%= historyText.replace(/\"/g, '&#34;') %>"><%= formattedGini %></span>
                            </td>
                            <td><%= country.area?.toLocaleString() || 'N/A' %> km²</td>
                            <td><%= country.abr %></td>
                            <td>
                                <% if (Array.isArray(country.borders) && country.borders.length > 0) { %>
                                    <% const borderNames = country.borders.map(code => codeToName[code] || code); %>
                                    <%= borderNames.join(', ') %>
                                <% } else if (country.borders) { %>
                                    <%= country.borders %>
                                <% } else { %>
                                    -
                                <% } %>
                            </td>
                            <td>
                                <% if (Array.isArray(country.timezones) && country.timezones.length > 0) { %>
                                    <ul class="mb-0 ps-3">
                                        <% country.timezones.forEach(tz => { %>
                                            <li><%= tz %></li>
                                        <% }) %>
                                    </ul>
                                <% } else if (country.timezones) { %>
                                    <%= country.timezones %>
                                <% } else { %>
                                    -
                                <% } %>
                            </td>
                            <td><%= country.creador || '-' %></td>
                            <td class="text-center">
                                <!-- Ver (eye) -->
                                <% const countryJsonAttr = JSON.stringify(country).replace(/'/g, "&#39;"); %>
                                <button type="button" title="Ver" class="action-icon me-2 btn btn-link p-0" data-country="<%= countryJsonAttr %>" onclick="viewCountryFromBtn(this)">
                                    <i class="fa fa-eye"></i>
                                </button>
                                <a href="/countries/edit/<%= country._id %>" title="Editar" class="action-icon me-2">
                                    <i class="fa fa-pen"></i>
                                </a>
                                <a href="javascript:void(0)" title="Eliminar" class="action-icon delete" onclick="deleteCountry('<%= country._id %>')">
                                    <i class="fa fa-trash"></i>
                                </a>
                            </td>
                        </tr>
                    <% }); %>
                <% } else { %>
                    <tr>
                        <td colspan="8" class="text-center">No hay países disponibles</td>
                    </tr>
                <% } %>
            </tbody>
        </table>
    </div>
    
    <script>
        $(document).ready(function() {
            $('#countriesTable').DataTable({
                language: {
                    url: 'https://cdn.datatables.net/plug-ins/1.13.6/i18n/es-ES.json'
                },
                pageLength: 10,
                responsive: true,
                order: [[0, 'asc']], // Ordenar por nombre
                columnDefs: [
                    { targets: [7], orderable: false } // La columna de acciones no se puede ordenar
                ]
            });
        });

        // Funciones para las acciones
        function editCountry(id) {
            // Redirigir a página de edición o abrir modal
            window.location.href = `/countries/edit/${id}`;
        }

        function deleteCountry(id) {
            if (confirm('¿Estás seguro de que quieres eliminar este país?')) {
                fetch(`/countries/${id}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Error al eliminar el país');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error al eliminar el país');
                });
            }
        }
    </script>
        <!-- Modal para ver país -->
        <div class="modal fade" id="viewCountryModal" tabindex="-1" aria-labelledby="viewCountryLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="viewCountryLabel">Detalles del país</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body" id="viewCountryBody">
                        <!-- contenido inyectado por JS -->
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                    </div>
                </div>
            </div>
        </div>

        <script>
            function viewCountryFromBtn(btn) {
                try {
                    const raw = btn.getAttribute('data-country') || '{}';
                    const country = JSON.parse(raw);
                    viewCountryRender(country);
                } catch (e) {
                    console.error('Error parse country data', e);
                    alert('No se pudieron cargar los datos del país');
                }
            }

            function viewCountryRender(country) {
                const body = document.getElementById('viewCountryBody');
                if (!body) return;
                const toList = (val) => {
                    if (!val) return '-';
                    if (Array.isArray(val)) return val.join(', ');
                    if (typeof val === 'object') return Object.entries(val).map(([k,v]) => `${k}: ${v}`).join('<br>');
                    return String(val);
                };
                const html = `
                    <h4>${country.name || '-'} <small class="text-muted">(${country.abr || '-'})</small></h4>
                    <p><strong>Capital(es):</strong> ${toList(country.capital)}</p>
                    <p><strong>Población:</strong> ${country.population ? Number(country.population).toLocaleString() : 'N/A'}</p>
                    <p><strong>Área:</strong> ${country.area ? Number(country.area).toLocaleString() + ' km²' : 'N/A'}</p>
                    <p><strong>Fronteras:</strong> ${toList(country.borders)}</p>
                    <p><strong>Timezones:</strong> ${toList(country.timezones)}</p>
                    <p><strong>Languages:</strong><br>${toList(country.languages)}</p>
                    <p><strong>Gini:</strong><br>${toList(country.gini)}</p>
                `;
                body.innerHTML = html;
                const modal = new bootstrap.Modal(document.getElementById('viewCountryModal'));
                modal.show();
            }
        </script>